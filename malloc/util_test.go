package malloc

import "testing"
import "math/rand"
import "fmt"

var _ = fmt.Sprintf("dummy")

func TestComputeslabs(t *testing.T) {
	ref := []int64{
		16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240,
		256, 272,
		288, 304, 320, 336, 352, 384, 416, 448, 480, 512, 544, 576, 608, 640,
		672, 720, 768, 816, 864, 912, 960, 1008, 1072, 1136, 1200, 1264, 1328,
		1408, 1488, 1568, 1648, 1744, 1840, 1936, 2032, 2144, 2256, 2368, 2496,
		2624, 2768, 2912, 3072, 3232, 3408, 3584, 3776, 3968, 4176, 4384, 4608,
		4848, 5104, 5360, 5632, 5920, 6224, 6544, 6880, 7232, 7600, 7984, 8384,
		8816, 9264, 9728, 10224, 10736, 11280, 11856, 12448, 13072, 13728,
		14416,
		15136, 15904, 16704, 17552, 18432, 19360, 20336, 21360, 22432, 23568,
		24752, 26000, 27312, 28688, 30128, 31648, 33232, 34896, 36640, 38480,
		40416, 42448, 44576, 46816, 49168, 51632, 54224, 56944, 59792, 62784,
		65936, 69232, 72704, 76352, 80176, 84192, 88416, 92848, 97504, 102384,
		107504, 112880, 118528, 124464, 130688, 137232, 144096, 151312, 158880,
		166832, 175184, 183952, 193152, 202816, 212960, 223616, 234800, 246544,
		258880, 271824, 285424, 299696, 314688, 330432, 346960, 364320, 382544,
		401680, 421776, 442864, 465008, 488272, 512688, 538336, 565264, 593536,
		623216, 654384, 687104, 721472, 757552, 795440, 835216, 876976, 920832,
		966880, 1015232, 1066000, 1119312, 1175280, 1234048, 1295760, 1360560,
		1428592, 1500032, 1575040, 1653792, 1736496, 1823328, 1914496, 2010224,
		2110736, 2216272, 2327088, 2443456, 2565632, 2693920, 2828624, 2970064,
		3118576, 3274512, 3438240, 3610160, 3790672, 3980208, 4179232, 4388208,
		4607632, 4838016, 5079920, 5333920, 5600624, 5880656, 6174688, 6483424,
		6807600, 7147984, 7505392, 7880672, 8274720, 8688464, 9122896, 9579040,
		10058000, 10560912, 11088960, 11643408, 12225584, 12836864, 13478720,
		14152656, 14860288, 15603312, 16383488, 17202672, 18062816, 18965968,
		19914272, 20910000, 21955504, 23053280, 24205952, 25416256, 26687072,
		28021440, 29422512, 30893648, 32438336, 34060256, 35763280, 37551456,
		39429040, 41400496, 43470528, 45644064, 47926272, 50322592, 52838736,
		55480672, 58254720, 61167456, 64225840, 67437136, 70808992, 74349456,
		78066928, 81970288, 86068816, 90372256, 94890880, 99635424, 104617200,
		109848064, 115340480, 121107504, 127162880, 133521024, 140197088,
		147206944, 154567296, 162295664, 170410448, 178930976, 187877536,
		197271424, 207135008, 217491760, 228366352, 239784672, 251773920,
		264362624, 277580768, 291459808, 306032800, 321334448, 337401184,
		354271248, 371984816, 390584064, 410113280, 430618944, 452149904,
		474757408, 498495280, 523420048, 549591056, 577070608, 605924144,
		636220352, 668031376, 701432944, 736504592, 773329824, 811996320,
		852596144, 895225952, 939987264, 986986640, 1036335984, 1088152784,
		1142560432, 1199688464, 1259672896, 1322656544, 1388789376, 1458228848,
		1531140304, 1607697328, 1688082208, 1772486320, 1861110640, 1954166176,
		2051874496, 2154468224, 2262191648, 2375301232, 2494066304, 2618769632,
		2749708128, 2887193536, 3031553216, 3183130880, 3342287424, 3509401808,
		3684871904, 3869115504, 4062571280, 4265699856, 4478984848, 4702934096,
		4938080800, 5184984848, 5444234096, 5716445808, 6002268112, 6302381520,
		6617500608, 6948375648, 7295794432, 7660584160, 8043613376, 8445794048,
		8868083760, 9311487952, 9777062352, 10265915472, 10779211248,
		11318171824,
		11884080416, 12478284448, 13102198672, 13757308608, 14445174048,
		15167432752, 15925804400, 16722094624, 17558199360, 18436109328,
		19357914800, 20325810544, 21342101072, 22409206128, 23529666448,
		24706149776, 25941457264, 27238530128, 28600456640, 30030479472,
		31532003456, 33108603632, 34764033824, 36502235520, 38327347296,
		40243714672, 42255900416, 44368695440, 46587130224, 48916486736,
		51362311072, 53930426640, 56626947984, 59458295392, 62431210176,
		65552770688, 68830409232, 72271929696, 75885526192, 79679802512,
		83663792640, 87846982272, 92239331392, 96851297968, 101693862880,
		106778556032, 112117483840, 117723358032, 123609525936, 129790002240,
		136279502352, 143093477472, 150248151360, 157760558928, 165648586880,
		173931016224, 182627567040, 191758945392, 201346892672, 211414237312,
		221984949184, 233084196656, 244738406496, 256975326832, 269824093184,
		283315297856, 297481062752, 312355115904, 327972871712, 344371515312,
		361590091088, 379669595648, 398653075440, 418585729216, 439515015680,
		461490766464, 484565304800, 508793570048, 534233248560, 560944910992,
		588992156544, 618441764384, 649363852608, 681832045248, 715923647520,
		751719829904, 789305821408, 828771112480, 870209668112, 913720151520,
		959406159104, 1007376467072, 1057745290432, 1099511627776}

	sizes := Computeslabs()

	if len(sizes) != len(ref) {
		t.Errorf("expected %v, got %v", len(ref), len(sizes))
	}
	for i, v := range ref {
		if sizes[i] != v {
			t.Errorf("expected %v, got %v - off %v", v, sizes[i], i)
		} else if (sizes[i] % Alignment) > 0 {
			t.Errorf("expected multiple of %v, got %v", Alignment, sizes[i])
		}
	}
}

func TestSuitableSlab(t *testing.T) {
	sizes := Computeslabs()
	x := sizes[1]
	for _, y := range sizes[1:] {
		for i := x + 1; i <= y; i += 9 * 1023 {
			if z := SuitableSlab(sizes, i); z != y {
				t.Errorf("for %v expected %v, got %v", i, y, z)
			}
		}
		x = y
	}
}

func BenchmarkComputeslabs(b *testing.B) {
	for i := 0; i < b.N; i++ {
		Computeslabs()
	}
}

func BenchmarkSuitableSlab(b *testing.B) {
	sizes := Computeslabs()
	rsizes := make([]int64, b.N)

	for i := 0; i < b.N; i++ {
		rsizes[i] = int64(rand.Intn(int(1023)))
	}

	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		SuitableSlab(sizes, rsizes[i])
	}
}
