package malloc

import "testing"
import "math/rand"
import "fmt"

var _ = fmt.Sprintf("dummy")

func TestComputeslabs(t *testing.T) {
	minblock, maxblock := int64(Alignment), int64(1024*1024*1024)
	ref := []int64{
		16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128, 136,
		144, 152, 160, 168, 176, 184, 200, 216, 232, 248, 264, 280, 296, 312,
		328, 344, 368, 392, 416, 440, 464, 488, 512, 544, 576, 608, 640, 672,
		712, 752, 792, 832, 880, 928, 976, 1024, 1080, 1136, 1192, 1256, 1320,
		1392, 1464, 1544, 1624, 1712, 1800, 1896, 1992, 2096, 2200, 2312, 2432,
		2560, 2688, 2824, 2968, 3120, 3280, 3448, 3624, 3808, 4000, 4200, 4416,
		4640, 4872, 5120, 5376, 5648, 5936, 6232, 6544, 6872, 7216, 7576, 7960,
		8360, 8784, 9224, 9688, 10176, 10688, 11224, 11792, 12384, 13008, 13664,
		14352, 15072, 15832, 16624, 17456, 18328, 19248, 20216, 21232, 22296,
		23416, 24592, 25824, 27120, 28480, 29904, 31400, 32976, 34624, 36360,
		38184, 40096, 42104, 44216, 46432, 48760, 51200, 53760, 56448, 59272,
		62240, 65352, 68624, 72056, 75664, 79448, 83424, 87600, 91984, 96584,
		101416, 106488, 111816, 117408, 123280, 129448, 135920, 142720, 149856,
		157352, 165224, 173488, 182168, 191280, 200848, 210896, 221440, 232512,
		244144, 256352, 269176, 282640, 296776, 311616, 327200, 343560, 360744,
		378784, 397728, 417616, 438496, 460424, 483448, 507624, 533008, 559664,
		587648, 617032, 647888, 680288, 714304, 750024, 787528, 826904, 868256,
		911672, 957256, 1005120, 1055376, 1108144, 1163552, 1221736, 1282824,
		1346968, 1414320, 1485040, 1559296, 1637264, 1719128, 1805088, 1895344,
		1990112, 2089624, 2194112, 2303824, 2419016, 2539968, 2666968, 2800320,
		2940336, 3087352, 3241720, 3403808, 3574000, 3752704, 3940344, 4137368,
		4344240, 4561456, 4789528, 5029008, 5280464, 5544488, 5821712, 6112800,
		6418440, 6739368, 7076336, 7430152, 7801664, 8191752, 8601344, 9031416,
		9482992, 9957144, 10455008, 10977760, 11526648, 12102984, 12708136,
		13343544, 14010728, 14711264, 15446832, 16219176, 17030136, 17881648,
		18775736, 19714528, 20700256, 21735272, 22822040, 23963144, 25161304,
		26419376, 27740344, 29127368, 30583736, 32112928, 33718576, 35404504,
		37174736, 39033472, 40985152, 43034416, 45186136, 47445448, 49817720,
		52308608, 54924040, 57670248, 60553760, 63581448, 66760520, 70098552,
		73603480, 77283656, 81147840, 85205232, 89465496, 93938776, 98635720,
		103567512, 108745888, 114183184, 119892344, 125886968, 132181320,
		138790392, 145729912, 153016408, 160667232, 168700600, 177135632,
		185992416, 195292040, 205056648, 215309480, 226074960, 237378712,
		249247648, 261710032, 274795536, 288535312, 302962080, 318110184,
		334015696, 350716480, 368252304, 386664920, 405998168, 426298080,
		447612984, 469993640, 493493328, 518168000, 544076400, 571280224,
		599844240, 629836456, 661328280, 694394696, 729114432, 765570160,
		803848672, 844041112, 886243168, 930555328, 977083096, 1025937256,
		1073741824}

	sizes := Computeslabs(minblock, maxblock)

	if len(sizes) != len(ref) {
		t.Errorf("expected %v, got %v", len(ref), len(sizes))
	}
	for i, v := range ref {
		if sizes[i] != v {
			t.Errorf("expected %v, got %v - off %v", v, sizes[i], i)
		} else if (sizes[i] % Alignment) > 0 {
			t.Errorf("expected multiple of %v, got %v", Alignment, sizes[i])
		}
	}

	// test panic
	fn := func(minblock, maxblock int64) {
		defer func() {
			if recover() == nil {
				t.Errorf("expected panic")
			}
		}()
		Computeslabs(minblock, maxblock)
	}
	fn(1024, 96)
	fn(100, 1024)
	fn(96, 1001)
}

func TestSuitableSlab(t *testing.T) {
	minblock, maxblock := int64(96), int64(1024*1024)
	sizes := Computeslabs(minblock, maxblock)
	x := sizes[1]
	for _, y := range sizes[1:] {
		for i := x + 1; i <= y; i++ {
			if z := SuitableSlab(sizes, i); z != y {
				t.Errorf("for %v expected %v, got %v", i, y, z)
			}
		}
		x = y
	}
}

func BenchmarkComputeslabs(b *testing.B) {
	minblock, maxblock := int64(96), int64(1024*1024*0124*1024)
	for i := 0; i < b.N; i++ {
		Computeslabs(minblock, maxblock)
	}
}

func BenchmarkSuitableSlab(b *testing.B) {
	minblock, maxblock := int64(96), int64(1024*1024*1024*10)
	sizes := Computeslabs(minblock, maxblock)
	rsizes := make([]int64, b.N)

	for i := 0; i < b.N; i++ {
		rsizes[i] = int64(rand.Intn(int(maxblock)))
	}

	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		SuitableSlab(sizes, rsizes[i])
	}
}
